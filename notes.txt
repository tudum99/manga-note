let isDragging = false;
let offsetX = 0;
let offsetY = 0;

function startDrag(e) {
  if (!memoRef.value) return;

  isDragging = true;

  const rect = memoRef.value.getBoundingClientRect();
  offsetX = e.clientX - rect.left;
  offsetY = e.clientY - rect.top;

  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', stopDrag);
}startDrag

function drag(e) {
  if (!isDragging || !memoRef.value) return;

  memoRef.value.style.left = `${e.clientX - offsetX}px`;
  memoRef.value.style.top = `${e.clientY - offsetY}px`;
}

function stopDrag() {
  isDragging = false;
  document.removeEventListener('mousemove', drag);
  document.removeEventListener('mouseup', stopDrag);
}

/*
import Keyboard from 'simple-keyboard';
import 'simple-keyboard/build/css/index.css';

const showKeyboard = ref(false);
const keyboard = ref(null);

function toggleKeyboard() {
  showKeyboard.value = !showKeyboard.value;
  initializeKeyboard();
}

const initializeKeyboard = () => {
  const keyboardInstance = new Keyboard({
    onKeyPress: (button) => handleKeyPress(button),
    layout: {
      default: [
        "1 2 3 4 5 6 7 8 9 0 - =",
        "Q W E R T Y U I O P [ ]",
        "A S D F G H J K L ; '",
        "Z X C V B N M , . /",
        "{shift} {space} {close}",
      ],
      shift: [
        "! @ # $ % ^ & * ( ) _ +",
        "Q W E R T Y U I O P { }",
        "A S D F G H J K L : \"",
        "Z X C V B N M < > ?",
        "{shift} {space} {close}",
      ],
      japanese: [
        "あ い う え お か き く け こ",
        "さ し す せ そ た ち つ て と",
        "な に ぬ ね の は ひ ふ へ ほ",
        "ま み む め も や ゆ よ わ を",
        "{shift} {space} {close}",
      ],
    },
    theme: "simple-keyboard hg-theme-default hg-layout-default",
    display: {
      '{space}': 'Space',
      '{close}': 'Close'
    },
  });

  // Change the layout to Japanese
  keyboardInstance.setOptions({
    layoutName: "japanese"
  });

  // Assign the keyboard to the ref to display it
  keyboard.value = keyboardInstance;
};

const handleKeyPress = (button) => {
  if (button === "{shift}") {
    // handle shift logic here
  } else if (button === "{space}") {
    input.value += " ";
  } else if (button === "{close}") {
    showKeyboard.value = false;
  } else {
    input.value += button;
  }
};
*/

